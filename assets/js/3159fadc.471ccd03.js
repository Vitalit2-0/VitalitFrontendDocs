"use strict";(self.webpackChunkvitalit_frontend_docs=self.webpackChunkvitalit_frontend_docs||[]).push([[1709],{2492:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var s=a(4848),o=a(8453);const t={title:"Gesti\xf3n del Estado Global",sidebar_position:1},r=void 0,i={id:"estado/gestion_estado_global",title:"Gesti\xf3n del Estado Global",description:"En la aplicaci\xf3n Vitalit, la gesti\xf3n del estado global se maneja utilizando Zustand y Context API.",source:"@site/docs/estado/gestion_estado_global.md",sourceDirName:"estado",slug:"/estado/gestion_estado_global",permalink:"/VitalitFrontendDocs/docs/estado/gestion_estado_global",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Gesti\xf3n del Estado Global",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Estado y Manejo de Datos"},next:{title:"Integraci\xf3n con Servicios Backend",permalink:"/VitalitFrontendDocs/docs/estado/integracion_backend"}},l={},c=[{value:"Manejo de Datos As\xedncronos",id:"manejo-de-datos-as\xedncronos",level:2},{value:"Ejemplo de Manejo de Peticiones As\xedncronas",id:"ejemplo-de-manejo-de-peticiones-as\xedncronas",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["En la aplicaci\xf3n Vitalit, la gesti\xf3n del estado global se maneja utilizando ",(0,s.jsx)(n.strong,{children:"Zustand"})," y ",(0,s.jsx)(n.strong,{children:"Context API"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Zustand:"})," Se utiliza como la principal herramienta para manejar la l\xf3gica central del estado global de la aplicaci\xf3n. Zustand permite crear y gestionar estados de manera eficiente con una API simple y directa, proporcionando un control de estado escalable y f\xe1cil de entender. Los estados que afectan a la mayor\xeda de la aplicaci\xf3n, como los datos del usuario, configuraciones globales y otras entidades compartidas, se gestionan a trav\xe9s de Zustand."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Context API:"})," Se emplea para manejar estados m\xe1s espec\xedficos relacionados con la UI, como la l\xf3gica de popups y ventanas emergentes. La Context API de React permite compartir valores entre componentes sin necesidad de pasar props manualmente a trav\xe9s de cada nivel del \xe1rbol de componentes. Esto es particularmente \xfatil para la gesti\xf3n de ventanas emergentes que requieren una manipulaci\xf3n m\xe1s localizada del estado."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"manejo-de-datos-as\xedncronos",children:"Manejo de Datos As\xedncronos"}),"\n",(0,s.jsxs)(n.p,{children:["Las peticiones as\xedncronas a la API en Vitalit se manejan utilizando ",(0,s.jsx)(n.strong,{children:"Axios"}),", un cliente HTTP basado en promesas que facilita la comunicaci\xf3n con servicios externos. Cada clase dentro de la carpeta ",(0,s.jsx)(n.code,{children:"services"})," est\xe1 encargada de manejar las peticiones espec\xedficas a las APIs correspondientes."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-de-manejo-de-peticiones-as\xedncronas",children:"Ejemplo de Manejo de Peticiones As\xedncronas"}),"\n",(0,s.jsxs)(n.p,{children:["A continuaci\xf3n, se muestra un ejemplo de c\xf3mo se maneja una petici\xf3n POST a la API para registrar una meta (goal) utilizando Axios. Este c\xf3digo se encuentra dentro de la clase ",(0,s.jsx)(n.code,{children:"GoalsServiceProvider.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'export async function RegisterGoal(token: string, goal: any): Promise<ResponseDto> {\r\n    try {\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n        const response = await axios.post(\'https://app-j462ku7pkq-uc.a.run.app/v1/goals\', goal, config);\r\n        return { code: "200", string: "", data: response.data } as ResponseDto;\r\n    } catch (error: any) {\r\n        return {\r\n            code: error.response.data.code,\r\n            string: error.response.data.string,\r\n            data: null\r\n        } as ResponseDto;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Configuraci\xf3n del Token: El token de autorizaci\xf3n se pasa en los headers de la petici\xf3n para autenticar al usuario."}),"\n",(0,s.jsx)(n.li,{children:"Manejo de Errores: En caso de error, el catch captura la respuesta de error y la estructura en un objeto ResponseDto."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>i});var s=a(6540);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);